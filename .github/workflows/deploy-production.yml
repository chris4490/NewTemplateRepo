name: Deploy to Production Project

on:
  pull_request:
    branches:
      - main
    types:
      - closed
  workflow_dispatch:
    inputs:
      force_import:
        description: 'Skip checking for recent changes'
        type: boolean
        required: true
        default: true

env:
  FILES_PATH: 'project-mvp-gold'

jobs:
  check:
    name: Check For Changes
    if: ${{ !github.event.inputs.force_import }}
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - name: Checkout Files
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check For Changes
        id: check
        run: |
          echo 'Checking for project files to deploy'
          if [ ! -d "${{ env.FILES_PATH }}" ]; then
            echo 'There are no project files to deploy in the ${{ env.FILES_PATH }} directory.'
            echo '## Deployment Skipped' >> $GITHUB_STEP_SUMMARY
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            if git diff --quiet HEAD~1 HEAD -- "${{ env.FILES_PATH }}"; then
              echo 'There were no changes in the latest commit to files in the ${{ env.FILES_PATH }} directory.'
              echo '## Deployment Skipped' >> $GITHUB_STEP_SUMMARY
              echo "has_changes=false" >> $GITHUB_OUTPUT
            else
              echo 'has_changes=true' >> $GITHUB_OUTPUT
            fi
          fi

  validate:
    name: Validate Snapshot 
    if: ${{ (always() && inputs.force_import) || needs.check.outputs.has_changes == 'true' }}
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Files
        uses: actions/checkout@v4

      - name: Parse Staging Connector Secrets
        id: parse-secrets
        run: |
          raw_secrets='${{ secrets.STAGING_CONNECTOR_SECRETS }}'
          secrets=$(echo "$raw_secrets" | jq -c .)
          echo "secrets=$secrets" >> $GITHUB_ENV

      - name: Create Temporary GitHub Event File
        id: create-temp-event
        run: |
          echo '${{ env.secrets }}'  > temp_event_with_secrets.json

      - name: Install Descope CLI
        uses: descope/descopecli/.github/actions/install@v0.8.2
      
      - name: Validate Snapshot
        id: validate
        shell: bash
        env:
          project_id: ${{ vars.MVP_STAGING_ID }}
          DESCOPE_MANAGEMENT_KEY: ${{ secrets.management_key }}
          PR_NUMBER: ${{ steps.fetch_pr.outputs.pr_number }}
        run: |
          cat ${{ github.workspace }}/temp_event_with_secrets.json
          OUTPUT=$(descopecli project snapshot validate "${{ vars.MVP_GOLD_ID }}" -p "${{ env.FILES_PATH }}" --secrets-input ${{ github.workspace }}/temp_event_with_secrets.json)
          echo "Descope CLI Output: $OUTPUT"

  import:
    name: Import Snapshot
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout Files
        uses: actions/checkout@v4

      - name: Install Descope CLI
        uses: descope/descopecli/.github/actions/install@v0.8.2

      - name: Parse Staging Connector Secrets
        id: parse-secrets
        run: |
          raw_secrets='${{ secrets.STAGING_CONNECTOR_SECRETS }}'
          secrets=$(echo "$raw_secrets" | jq -c .)
          echo "secrets=$secrets" >> $GITHUB_ENV

      - name: Create Temporary GitHub Event File
        id: create-temp-event
        run: |
          echo '${{ env.secrets }}'  > temp_event_with_secrets.json

      - name: Import Changes
        env:
          project_id: ${{ vars.MVP_STAGING_ID }}
          DESCOPE_MANAGEMENT_KEY: ${{ secrets.management_key }}
          PR_NUMBER: ${{ steps.fetch_pr.outputs.pr_number }}
        run: |
          cat ${{ github.workspace }}/temp_event_with_secrets.json
          OUTPUT=$(descopecli project snapshot import "${{ vars.MVP_GOLD_ID }}" -p "${{ env.FILES_PATH }}" --secrets-input ${{ github.workspace }}/temp_event_with_secrets.json)
          echo "Descope CLI Output: $OUTPUT"
      - name: Delete Temporary Event File
        if: always()
        run: |
          echo "Deleting temporary event file..."
          rm -f ${{ github.workspace }}/temp_event_with_secrets.json